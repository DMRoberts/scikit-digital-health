# TODO: build predict function using tso.py, activity_index.py, sleep_classification.py, endpoints.py

from skimu.base import _BaseProcess  # import the base process class


class Sleep(_BaseProcess):
    """
    Class to implement any processing steps

    NOTE that this is the docstring for the class! placing up here aids with
    clean autogenerated documentation

    Parameters
    ----------
    attr1 : {None, int}, optional
        Attribute 1 description
    attr2 : {None, float}, optional
        Attribute 2 description

    ...
    """
    def __init__(self, attr1=None, attr2=None):
        # pass all arguments into super().__init__(), this will
        # autogenerate the __repr__ for the class
        super().__init__(
            attr1=attr1,
            attr2=attr2
        )
        # rest of setup required

    """
    Next, define the "predict" method, which does all the computation for the process.
    The call of this is pretty open, but should have the **kwargs option at the end.
    While the **kwargs is important for the way the pipelines, etc work, it
    clutters/can add confusion to the docstring. As such, the first line of the
    docstring should be the actual call for predict

    Note that the * by itself indicates that the following arguments are key-word ONLY.
    For this example, therefore the gyro is an optional argument. Time and accel
    are treated as required arguments, even though they are key-word

    Note that the units for time, accel, and gyro should ALWAYS be unix seconds,
    'g', and 'deg/s' to match the pipeline implementation, and what other processes
    are expecting.
    """
    def predict(self, time=None, accel=None, *, temp=None, **kwargs):
        """
        predict(time, accel, *, temp=None)

        Generate the sleep boundaries and endpoints for a time series signal.

        Parameters
        ----------
        time : numpy.ndarray
            (N, ) array of unix timestamps, in seconds
        accel : numpy.ndarray
            (N, 3) array of acceleration, in units of 'g'
        temp : numpy.ndarray, optional
            (N, ) array of temperature values, units of 'C'

        ...
        """
        # FULL SLEEP PIPELINE
        # compute total sleep opportunity window
        # compute activity index
        # compute sleep predictions
        # compute sleep related endpoints


        # run preprocessing
        accel = calibrate_accel(accel)

        # if you need something passed in thats not a default argument, but
        # might be useful, retrieve it from  kwargs
        opt_item = kwargs.get('opt_item', None)


        # FINALLY, the last few lines and return values should be standard!
        kwargs.update({self._time: time, self._acc: accel, self._gyro: gyro})
        """
        update the kwargs with any of the variables passed in (in this case, time,
        accel, and gyro). This means that you should make a copy if you are
        significantly modifying any of these for your own function/purposes
        """
        if self._in_pipeline:  # self._in_pipeline is taken care of in the base class
            return kwargs, preproc_dict  # return both the input, and output
        else:
            return preproc_dict  # if outside pipeline, only return the results
